@startuml
class Items.Veggies.Bean {
+ <<Create>> Bean()
}
abstract class Items.Veggies.BaseVeggies {
- float positionX
- float positionY
- boolean isCollected
- float growthPoint
- float growthRate
- float MAXGROWTHRATE
- int Hp
- float waterPoint
- float waterDroppingRate
- float MAXWATERDROPPINGRATE
- float MAXWATER
- int price
+ <<Create>> BaseVeggies(int,float,float,float,int)
+ float getPositionX()
+ float getPositionY()
+ void setPositionX(float)
+ void setPositionY(float)
+ void spawnOnMap()
+ void collected()
+ boolean isCollected()
+ void weatherEffected()
+ float getGrowthRate()
+ void setGrowthRate(float)
+ void setCollected(boolean)
+ int getHp()
+ void setHp(int)
+ float getWaterPoint()
+ void setWaterPoint(float)
+ float getGrowthPoint()
+ void setGrowthPoint(float)
+ float getWaterDroppingRate()
+ void setWaterDroppingRate(float)
+ int getPrice()
+ void setPrice(int)
}
interface Items.Interfaces.Collectable {
~ void setPositionX(float)
~ void setPositionY(float)
~ void spawnOnMap()
~ void collected()
~ boolean isCollected()
+ float getPositionX()
+ float getPositionY()
}
class Items.Character.Player {
- Stick stick
- int money
+ <<Create>> Player(int,int,int,int,int)
+ void attack(Object)
+ void walk()
+ Stick getStick()
+ void setStick(Stick)
+ int getMoney()
+ void setMoney(int)
}
class Items.Veggies.Rice {
+ <<Create>> Rice()
}
interface Items.Interfaces.WeatherEffectable {
~ void weatherEffected()
}
class Items.Veggies.Cucumber {
+ <<Create>> Cucumber()
}
abstract class Items.Character.BaseCharacter {
- float positionX
- float positionY
- float speedRate
- int MAXSPEEDRATE
- int attackRange
- int damage
- int attackCooldown
# <<Create>> BaseCharacter(float,float,int,int,int)
+ void weatherEffected()
+ int getAttackCooldown()
+ void setAttackCooldown(int)
+ float getPositionX()
+ float getPositionY()
+ float getSpeedRate()
+ void setPositionX(float)
+ void setPositionY(float)
+ void setSpeedRate(float)
+ int getAttackRange()
+ void setAttackRange(int)
+ void walk()
+ int getMAXSPEEDRATE()
+ int getDamage()
+ void setDamage(int)
}
class Items.Inventory.Clock {
- Config.Weather weather
- int timer
+ <<Create>> Clock()
+ boolean changeSeason(Config.Weather)
+ Config.Weather getWeather()
+ void setWeather(Config.Weather)
+ int getTimer()
+ void setTimer(int)
}
interface Items.Interfaces.Walkable {
~ float getPositionX()
~ float getPositionY()
~ float getSpeedRate()
~ void setPositionY(float)
~ void setSpeedRate(float)
~ void walk()
}
interface Items.Interfaces.Attackable {
~ void attack(Object)
~ void setPositionX(float)
~ int getAttackRange()
}
class Items.Character.Zombie {
- int Hp
- BaseVeggies targetVeggie
+ <<Create>> Zombie()
+ void attack(Object)
+ int getHp()
+ void setHp(int)
+ BaseVeggies getTargetVeggie()
+ void setTargetVeggie(BaseVeggies)
+ void walk()
}
class Items.Inventory.Stick {
- float positionX
- float positionY
- boolean isCollected
- int durability
- int attackRange
- int damage
+ <<Create>> Stick()
+ <<Create>> Stick(int,int)
+ void collected()
+ int getDamage()
+ void setDamage(int)
+ int getDurability()
+ void setDurability(int)
+ int getAttackRange()
+ void setAttackRange(int)
+ void setPositionX(float)
+ void setPositionY(float)
+ void spawnOnMap()
+ boolean isCollected()
+ float getPositionX()
+ float getPositionY()
+ void setCollected(boolean)
}


Items.Veggies.BaseVeggies <|-- Items.Veggies.Bean
Items.Interfaces.WeatherEffectable <|.. Items.Veggies.BaseVeggies
Items.Interfaces.Collectable <|.. Items.Veggies.BaseVeggies
Items.Character.BaseCharacter <|-- Items.Character.Player
Items.Veggies.BaseVeggies <|-- Items.Veggies.Rice
Items.Veggies.BaseVeggies <|-- Items.Veggies.Cucumber
Items.Interfaces.Walkable <|.. Items.Character.BaseCharacter
Items.Interfaces.Attackable <|.. Items.Character.BaseCharacter
Items.Interfaces.WeatherEffectable <|.. Items.Character.BaseCharacter
Items.Character.BaseCharacter <|-- Items.Character.Zombie
Items.Interfaces.Collectable <|.. Items.Inventory.Stick
@enduml