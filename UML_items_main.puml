@startuml
class Main {
- int level
+ {static} void main(String[])
+ void start(Stage)
- void preStory(Stage)
- void endStory(Stage)
- void startGame(Stage)
- void gameEnd(Stage)
- void completeGame(Stage)
}


class items.inventories.Broom {
- boolean isCollected
- float durability
- int attackRange
- float damage
- double width
- double height
+ <<Create>> Broom()
+ void weatherEffected()
+ void collected()
+ void draw(GraphicsContext)
+ void spawnOnMap()
+ void setX(double)
+ void setY(double)
+ double getWidth()
+ double getHeight()
+ float getDamage()
+ void setDamage(float)
+ float getDurability()
+ void setDurability(float)
+ int getAttackRange()
+ void setAttackRange(int)
+ boolean isCollected()
+ void setCollected(boolean)
}


abstract class items.veggies.BaseVeggie {
- boolean isCollected
- float growthPoint
- float MAXGROWTHPOINT
- float growthRate
- float MAXGROWTHRATE
- float Hp
- float waterPoint
- float waterDroppingRate
- float MAXWATERDROPPINGRATE
- float MAXWATER
- int MAXHP
- double width
- double height
+ <<Create>> BaseVeggie(int,float,float,float,int)
+ void spawnOnMap()
+ void collected()
+ boolean isCollected()
+ void weatherEffected()
+ void draw(GraphicsContext)
- void drawGrowthDegree(GraphicsContext)
- void drawBar(GraphicsContext)
+ double getWidth()
+ double getHeight()
+ float getGrowthRate()
+ void setGrowthRate(float)
+ void setCollected(boolean)
+ float getHp()
+ void setHp(float)
+ float getWaterPoint()
+ void setWaterPoint(float)
+ float getGrowthPoint()
+ void setGrowthPoint(float)
+ float getWaterDroppingRate()
+ void setWaterDroppingRate(float)
+ int getMaxHp()
+ float getMaxWater()
}


interface items.interfaces.Walkable {
~ float getSpeedRate()
~ void setSpeedRate(float)
~ void walk()
}

class items.characters.NormalSlime {
+ <<Create>> NormalSlime()
+ void draw(GraphicsContext)
}

interface items.interfaces.WeatherEffectable {
~ void weatherEffected()
}

class items.veggies.RainbowDrake {
+ <<Create>> RainbowDrake()
+ void draw(GraphicsContext)
}

class items.characters.HitHardSlime {
+ <<Create>> HitHardSlime()
+ void draw(GraphicsContext)
}

abstract class items.characters.BaseCharacter {
- float speedRate
- float MAXSPEEDRATE
- int attackRange
- float damage
- int attackCoolDown
+ <<Create>> BaseCharacter(double,double,int,int,float)
+ <<Create>> BaseCharacter(int,int,float)
+ void weatherEffected()
+ void setX(double)
+ void setY(double)
+ int getAttackCoolDown()
+ void setAttackCoolDown(int)
+ float getSpeedRate()
+ void setSpeedRate(float)
+ int getAttackRange()
+ void walk()
+ float getDamage()
+ void setDamage(float)
}


class items.veggies.RedFlower {
+ <<Create>> RedFlower()
+ void draw(GraphicsContext)
}

interface items.interfaces.Attackable {
~ void attack()
~ int getAttackRange()
}

class items.characters.Player {
- Broom broom
- Config.WalkState walkState
- boolean isAttack
- int maxAttackCoolDown
+ <<Create>> Player(int,int,int,int,int)
+ void weatherEffected()
+ void attack()
+ void collectVeggie()
+ void action()
+ void walk()
+ void draw(GraphicsContext)
+ int getMaxAttackCoolDown()
+ void setMaxAttackCoolDown(int)
+ Broom getBroom()
+ void setBroom(Broom)
+ Config.WalkState getWalkState()
+ void setWalkState(Config.WalkState)
+ boolean isAttack()
+ void setAttack(boolean)
}


class items.veggies.Daffodil {
+ <<Create>> Daffodil()
+ void draw(GraphicsContext)
}

class items.inventories.Clock {
- Config.Weather weather
- int timer
+ <<Create>> Clock()
+ boolean changeSeason(Config.Weather)
+ Config.Weather getWeather()
+ int getTimer()
+ void setTimer(int)
}


interface items.interfaces.Collectable {
~ void spawnOnMap()
~ void collected()
~ boolean isCollected()
}

abstract class items.characters.Slime {
- float Hp
- float maxHp
- BaseVeggie targetVeggie
- float maxDamage
+ <<Create>> Slime(int,float,float)
- void spawnOnMap()
+ void weatherEffected()
+ void attack()
+ float getMaxHp()
+ void setMaxHp(float)
+ float getMaxDamage()
+ void setMaxDamage(float)
+ float getHp()
+ void setHp(float)
+ BaseVeggie getTargetVeggie()
+ void setTargetVeggie(BaseVeggie)
+ void walk()
+ void draw(GraphicsContext)
}


class items.characters.SpeedSlime {
+ <<Create>> SpeedSlime()
+ void draw(GraphicsContext)
}



javafx.application.Application <|-- Main
items.interfaces.Collectable <|.. items.inventories.Broom
items.interfaces.WeatherEffectable <|.. items.inventories.Broom
guiSharedObject.Entity <|-- items.inventories.Broom
items.interfaces.WeatherEffectable <|.. items.veggies.BaseVeggie
items.interfaces.Collectable <|.. items.veggies.BaseVeggie
guiSharedObject.Entity <|-- items.veggies.BaseVeggie
items.characters.Slime <|-- items.characters.NormalSlime
items.veggies.BaseVeggie <|-- items.veggies.RainbowDrake
items.characters.Slime <|-- items.characters.HitHardSlime
items.interfaces.Walkable <|.. items.characters.BaseCharacter
items.interfaces.Attackable <|.. items.characters.BaseCharacter
items.interfaces.WeatherEffectable <|.. items.characters.BaseCharacter
guiSharedObject.CollidableEntity <|-- items.characters.BaseCharacter
items.veggies.BaseVeggie <|-- items.veggies.RedFlower
items.characters.BaseCharacter <|-- items.characters.Player
items.veggies.BaseVeggie <|-- items.veggies.Daffodil
items.characters.BaseCharacter <|-- items.characters.Slime
items.characters.Slime <|-- items.characters.SpeedSlime
@enduml