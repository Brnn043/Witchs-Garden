@startuml
abstract class Item.Character.Slime {
- float Hp
- float maxHp
- BaseVeggie targetVeggie
- float maxDamage
- void spawnOnMap()
+ void weatherEffected()
+ void attack()
+ float getMaxHp()
+ void setMaxHp(float)
+ float getMaxDamage()
+ void setMaxDamage(float)
+ float getHp()
+ void setHp(float)
+ BaseVeggie getTargetVeggie()
+ void setTargetVeggie(BaseVeggie)
+ void walk()
+ void draw(GraphicsContext)
}
class Item.Character.Player {
- Broom broom
- Config.WalkState walkState
- boolean isAttack
- int maxAttackCoolDown
+ void weatherEffected()
+ void attack()
+ void collectVeggie()
+ void action()
+ void walk()
+ void draw(GraphicsContext)
+ int getMaxAttackCoolDown()
+ void setMaxAttackCoolDown(int)
+ Broom getBroom()
+ void setBroom(Broom)
+ Config.WalkState getWalkState()
+ void setWalkState(Config.WalkState)
+ boolean isAttack()
+ void setAttack(boolean)
}
class Item.Character.NormalSlime {
+ void draw(GraphicsContext)
}
class Main {
- int level
+ {static} void main(String[])
+ void start(Stage)
- void preStory(Stage)
- void EndStory(Stage)
- void startGame(Stage)
- void gameEnd(Stage)
- void ConpleteGame(Stage)
}
abstract class Item.Veggie.BaseVeggie {
- boolean isCollected
- float growthPoint
- float MAXGROWTHPOINT
- float growthRate
- float MAXGROWTHRATE
- float Hp
- float waterPoint
- float waterDroppingRate
- float MAXWATERDROPPINGRATE
- float MAXWATER
- int MAXHP
- double width
- double height
+ void spawnOnMap()
+ void collected()
+ boolean isCollected()
+ void weatherEffected()
+ void draw(GraphicsContext)
- void drawGrowthDegree(GraphicsContext)
- void drawBar(GraphicsContext)
+ double getWidth()
+ double getHeight()
+ float getGrowthRate()
+ void setGrowthRate(float)
+ void setCollected(boolean)
+ float getHp()
+ void setHp(float)
+ float getWaterPoint()
+ void setWaterPoint(float)
+ float getGrowthPoint()
+ void setGrowthPoint(float)
+ float getWaterDroppingRate()
+ void setWaterDroppingRate(float)
+ int getMaxHp()
+ float getMaxWater()
}
interface Item.Interface.Collectable {
~ void spawnOnMap()
~ void collected()
~ boolean isCollected()
}
interface Item.Interface.WeatherEffectable {
~ void weatherEffected()
}
class Item.Veggie.Daffodil {
+ void draw(GraphicsContext)
}
class Item.Inventory.Clock {
- Config.Weather weather
- int timer
+ boolean changeSeason(Config.Weather)
+ Config.Weather getWeather()
+ int getTimer()
+ void setTimer(int)
}
abstract class Item.Character.BaseCharacter {
- float speedRate
- float MAXSPEEDRATE
- int attackRange
- float damage
- int attackCoolDown
+ void weatherEffected()
+ void setX(double)
+ void setY(double)
+ int getAttackCoolDown()
+ void setAttackCoolDown(int)
+ float getSpeedRate()
+ void setSpeedRate(float)
+ int getAttackRange()
+ void walk()
+ float getDamage()
+ void setDamage(float)
}
class Item.Character.SpeedSlime {
+ void draw(GraphicsContext)
}
interface Item.Interface.Walkable {
~ float getSpeedRate()
~ void setSpeedRate(float)
~ void walk()
}
class Item.Veggie.RainbowDrake {
+ void draw(GraphicsContext)
}
class Item.Veggie.RedFlower {
+ void draw(GraphicsContext)
}
interface Item.Interface.Attackable {
~ void attack()
~ int getAttackRange()
}
class Item.Inventory.Broom {
- boolean isCollected
- float durability
- int attackRange
- float damage
- double width
+ void weatherEffected()
+ void collected()
+ void draw(GraphicsContext)
+ void spawnOnMap()
+ void setX(double)
+ void setY(double)
+ double getWidth()
+ double getHeight()
+ float getDamage()
+ void setDamage(float)
+ float getDurability()
+ void setDurability(float)
+ int getAttackRange()
+ void setAttackRange(int)
+ boolean isCollected()
+ void setCollected(boolean)
}
class Item.Character.HitHardSlime {
+ void draw(GraphicsContext)
}


Item.Character.BaseCharacter <|-- Item.Character.Slime
Item.Character.BaseCharacter <|-- Item.Character.Player
Item.Character.Slime <|-- Item.Character.NormalSlime
javafx.application.Application <|-- Main
Item.Interface.WeatherEffectable <|.. Item.Veggie.BaseVeggie
Item.Interface.Collectable <|.. Item.Veggie.BaseVeggie
GUISharedObject.Entity <|-- Item.Veggie.BaseVeggie
Item.Veggie.BaseVeggie <|-- Item.Veggie.Daffodil
Item.Interface.Walkable <|.. Item.Character.BaseCharacter
Item.Interface.Attackable <|.. Item.Character.BaseCharacter
Item.Interface.WeatherEffectable <|.. Item.Character.BaseCharacter
GUISharedObject.CollidableEntity <|-- Item.Character.BaseCharacter
Item.Character.Slime <|-- Item.Character.SpeedSlime
Item.Veggie.BaseVeggie <|-- Item.Veggie.RainbowDrake
Item.Veggie.BaseVeggie <|-- Item.Veggie.RedFlower
Item.Interface.Collectable <|.. Item.Inventory.Broom
Item.Interface.WeatherEffectable <|.. Item.Inventory.Broom
GUISharedObject.Entity <|-- Item.Inventory.Broom
Item.Character.Slime <|-- Item.Character.HitHardSlime
@enduml